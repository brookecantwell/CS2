Script started on Wed 11 May 2016 04:01:10 AM EDT
]0;brookecantwell@storm:~/CISC2000/final/tictactoe[brookecantwell@storm tictactoe]$ pwd
/home/students/FALL15/brookecantwell/CISC2000/final/tictactoe
]0;brookecantwell@storm:~/CISC2000/final/tictactoe[brookecantwell@storm tictactoe]$ cat date.h
/*
 * Date Class Header File
 *
 * date.h
 *
 * Brooke Cantwell
 *
 * 5 March 2016
 *
 * Modification of the original Date from
 * previous labs to be used in the TicTacToe
 * class.
 *
 */

#ifndef DATE_H
#define DATE_H

#include <iostream>

using namespace std;

class Date {
	//global functions
	friend istream& operator>> (istream&, Date&);
	friend ostream& operator<< (ostream&, const Date&);
	friend bool operator== (int, const Date&);

	public:
		//constructors
		Date( );
		Date(int, int, int);
		//mutator methods
		bool setDate(int, int, int);
		void inputDate(istream&);
		//accessor methods
		int getMonth( ) const;
		int getDay( ) const;
		int getYear( ) const;
		//operator overloading
		//equality
		bool operator==(const Date&) const;
		bool operator==(int) const;
	private:
		//getMaxDays( ) - returns max days for a given month
		int getMaxDays( );
		int month, day, year;
};

#endif
]0;brookecantwell@storm:~/CISC2000/final/tictactoe[brookecantwell@storm tictactoe]$ cat date.cpp
/*
 * Implementation for the Date Class
 *
 * date.cpp
 *
 * Brooke Cantwell
 *
 * 5 May 2016
 *
 * Global functions and  methods for the
 * Date class for use in the Tic Tac Toe
 * class.
 *
 */

#include "date.h"

using namespace std;

//GLOBAL FUNCTIONS

//input operator
istream& operator>> (istream&inp, Date&d) {
	d.inputDate(inp);

	return(inp);
}

//output operator
ostream& operator<< (ostream&out, const Date&d) {

	out << d.month << '/' << d.day << '/' << d.year << endl;

	return(out);
}

//equality operator function
bool operator== (int y, const Date&d) {
	bool restat = false;

	if (d.year == y)
		restat = true;

	return(restat);
}

//CONSTRUCTORS
//default constructor
Date::Date( ) {
	month = day = year = 0;
}

//constructor for all data members
Date::Date(int m, int d, int y) {
	month = m;
	day = d;
	year = y;
}

//MUTATOR METHODS
//setDate, checks for valid date and assigns integers
//to data members if they are valid
bool Date::setDate(int m, int d, int y) {
	bool restat = false;
	int maxDays;

	//determine the maximum amount of days in the month
	maxDays = getMaxDays( );
	
	//check for a valid date
	if (month >=1 && month <= 12 && day > 0 && day <= maxDays) {
		restat = true;
		month = m;
		day = d;
		year = y;
	}

	return(restat);
}

//inputDate, gets user input for date and checks validity with setDate
void Date::inputDate(istream&inp) {
	char dummyChar;

	do {
		cout << "Input date in the for mm/dd/yyyy: ";
		cin >> month >> dummyChar >> day >> dummyChar >> year;
	} while (!setDate(month, day, year));
}

//ACCESSOR METHODS

int Date::getMonth( ) const {
	return(month);
}

int Date::getDay( ) const {
	return(day);
}

int Date::getYear( ) const {
	return(year);
}

//OPERATOR OVERLOADED METHODS

//equality operator (equality between 2 date objects)
bool Date::operator==(const Date&d) const {
	bool restat = false;

	if (month == d.month && day == d.day && year == d.year)
		restat = true;

	return(restat);
}

//equality operator (equality between the year data member
//of a date object and some integer for year)
bool Date::operator==(int y) const {
	bool restat = false;

	if (year == y)
		restat = true;

	return(restat);
}

//PRIVATE METHODS

//getMaxDays - returns the max number of days in a month
int Date::getMaxDays( ) {
	int maxDays;

	switch(month) {
		case 1:
		case 3:
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			maxDays = 31;
			break;
		case 4:
		case 6:
		case 9:
		case 11:
			maxDays = 30;
			break;
		case 2:
			maxDays = 28;
	}

	return(maxDays);
}
]0;brookecantwell@storm:~/CISC2000/final/tictactoe[brookecantwell@storm tictactoe]$ cat name.h
/*
 * Definition for the Name Class
 *
 * name.h
 *
 * Brooke Cantwell
 *
 * 5 May 2016
 *
 * Header file for the Name class.
 *
 */

#ifndef NAME_H
#define NAME_H

#include <iostream>

using namespace std;

class Name {
	//global functions
	friend istream& operator>> (istream&, Name&);
	friend ostream& operator<< (ostream&, const Name&);

	public:
		//constructors
		Name( );
		Name(string, char, string);
		//mutator methods
		void setName(string, char, string);
		//accessor methods
		string getFirstName( ) const;
		char getMiddleInitial( ) const;
		string getLastName( ) const;
	private:
		string fname, lname;
		char mi;
};

#endif
]0;brookecantwell@storm:~/CISC2000/final/tictactoe[brookecantwell@storm tictactoe]$ cat name.cpp
/*
 * Implementation for the Name Class
 *
 * name.cpp
 *
 * Brooke Cantwell
 *
 * 5 May 2016
 *
 * Functions and methods for the Name
 * class, modified to be used in the 
 * Player class object of the Tic Tac 
 * Toe class.
 *
 */

#include <iostream>
#include "name.h"

using namespace std;

//GLOBAL FUNCTIONS

//input operator
istream& operator>> (istream&in, Name&n) {
	cout << "Enter name in the form First MI Last: ";
	in >> n.fname >> n.mi >> n.lname;
	
	return(in);
}

//output operator
ostream& operator<< (ostream&out, const Name&n) {
	out << n.fname << ' ' << n.mi << ' ' << n.lname << endl;	

	return(out);
}

//METHODS

//CONSTRUCTORS

//default constructor
Name::Name( ) {
	fname = "First";
	mi = 'M';
	lname = "Last";
}

//constructor for all data members
Name::Name(string f, char m, string l) {
	fname = f;
	mi = m;
	lname = l;
}

//MUTATOR METHODS

void Name::setName(string f, char m, string l) {
	fname = f;
	mi = m;
	lname = l;
}

//ACCESSOR METHODS

string Name::getFirstName( ) const {
	return(fname);
}

char Name::getMiddleInitial( ) const {
	return(mi);
}

string Name::getLastName( ) const {
	return(lname);
}
]0;brookecantwell@storm:~/CISC2000/final/tictactoe[brookecantwell@storm tictactoe]$ cat player.h
/*
 * Player Class Definition
 *
 * player.h
 *
 * Brooke Cantwell
 *
 * 5 May 2016
 *
 * Definition for the Player class
 * to be used in the Tic Tac Toe class.
 *
 */

#ifndef PLAYER_H
#define PLAYER_H

#include <iostream>
#include "name.h"

using namespace std;

class Player {
	//global functions
	friend istream& operator>>(istream&, Player&);	
	friend ostream& operator<<(ostream&, const Player&);

	public:
		//constructors
		Player( );
		Player(string, char, string, string, char);
		//mutator methods
		bool setMarker(char);
		void setName(string, char, string);
		//accessor methods
		char getMarker( );
		string getHandle( );
		//public static data member gamesWon
		int gamesWon;
	private:
		Name name;
		string handle;
		char marker;
};
#endif
]0;brookecantwell@storm:~/CISC2000/final/tictactoe[brookecantwell@storm tictactoe]$ cat player.cpp
/*
 * Player Class Implementation
 *
 * player.cpp
 *
 * Brooke Cantwell
 *
 * 5 May 2016
 *
 * Functions and methods for the Player class
 * for use in the Tic Tac Toe class.
 *
 */

#include <iostream>
#include "player.h"
#include "name.h"

using namespace std;

//GLOBAL FUNCTIONS

//input operator
istream& operator>>(istream&in, Player&p) {
	in >> p.name;
	cout << "Enter your desired player handle: ";
	in >> p.handle;

	return(in);
}

//output operator
ostream& operator<<(ostream&out, const Player&p) {
	out << "Name: " << p.name << endl;
	out << "Handle: " << p.handle << endl;
	out << "Marker: " << p.marker << endl;
	out << "Games Won: " << p.gamesWon << endl;

	return(out);
}

//METHODS

//CONSTRUCTORS

Player::Player( ) {
	handle = "Your Handle";
	marker = '0';
	gamesWon = 0;
}

Player::Player(string f, char m, string l, string hand, char mark) {
	name.setName(f, m, l);
	handle = hand;
	marker = mark;
	gamesWon = 0;
}

//MUTATOR METHODS

bool Player::setMarker(char mark) {
	bool restat = true;

	if (mark != 'X' && mark != 'x' && mark != 'O' && mark != 'o')
		restat = false;
	else
		marker = mark;

	return(restat);
}

void Player::setName(string f, char m, string l) {
	setName(f, m, l);
}

//ACCESSOR METHODS

char Player::getMarker( ) {
	return(marker);
}

string Player::getHandle( ) {
	return(handle);
}
]0;brookecantwell@storm:~/CISC2000/final/tictactoe[brookecantwell@storm tictactoe]$ cat cell.h
/*
 * Cell Class Definition
 * 
 * cell.h
 *
 * Brooke Cantwell
 *
 * 8 May 2016
 *
 * Definition for the Cell class to be
 * used in the Tic Tac Toe class.
 */

#ifndef CELL_H
#define CELL_H

#include <iostream>

using namespace std;

class Cell {
	public:
		//constructors
		Cell( );
		Cell(int, int, char);
		//mutator methods
		void setLocation(int, int);
		//set marker and iMarker
		bool setMarker(char);
		bool takenCell( );
		//accessor methods
		char getMarker( );
		int getiMarker( );
	private:
		int row, col;
		char marker;
		int iVal, iMarker;
};

#endif
]0;brookecantwell@storm:~/CISC2000/final/tictactoe[brookecantwell@storm tictactoe]$ cat cell.cpp
/*
 * Cell Class Implementation
 *
 * cell.cpp
 *
 * Brooke Cantwell
 *
 * 8 May 2016
 *
 * Cell class methods.
 *
 */

#include <iostream>
#include "cell.h"

using namespace std;

//CONSTRUCTORS

//default constructor
Cell::Cell( ) {
	row = col = 0;
	marker = ' ';
	iVal = 0;
	iMarker = 0;
}

Cell::Cell(int r, int c, char m) {
	row = r;
	col = c;
	marker = m;
}

//MUTATOR METHODS

//setLocation, assign cell location
void Cell::setLocation(int r, int c) {
	row = r;
	col = c;
}

bool Cell::setMarker(char m) {
	bool restat = true;

	if (m == 'X' || m == 'O' || m == ' ') {
		marker = m;	
		
		//set ival from the marker
		switch(m) {
			case 'X':
				iMarker = 3;
				break;
			case 'O':
				iMarker = -3;
				break;
			default:
				iMarker = 0;
		}
	}
	else {
		iMarker = 0;
		restat = false;
	}
	
	return(restat);

}

//setTakenCell, determine if a cell is already taken
bool Cell::takenCell( ) {
	bool restat = true;

	if (iMarker == 0)
		restat = false;

	return(restat);
}

//ACCESSOR METHODS

char Cell::getMarker( ) {
	return(marker);
}

int Cell::getiMarker( ) {
	return(iMarker);
}
]0;brookecantwell@storm:~/CISC2000/final/tictactoe[brookecantwell@storm tictactoe]$ cat tictactoe.h
/*
 * Tic Tac Toe Class Definition
 *
 * tictactoe.h
 *
 * Brooke Cantwell
 *
 * 8 May 2016
 *
 * Class definition for the Tic Tac Toe class.
 *
 */

#ifndef TICTACTOE_H
#define TICTACTOE_H

#include <iostream>
#include "player.h"
#include "cell.h"
#include "date.h"

using namespace std;

class TicTacToe {
	//global functions
	//output - displays the board and current player
	friend ostream& operator<< (ostream&, TicTacToe);
	//input - accepts user input for cell
	friend istream& operator>> (istream&, TicTacToe&);

	public:
		//constructors
		TicTacToe( );
		TicTacToe(string, char, string, string, char, string);
		//mutator methods
		bool setCell(int, int);
		void playCell(int, int);
		void inputPlayers( );
		void inputDate( );
		//other methods
		//randomize marker (and player order)
		void randomMarker( );
		void changePlayer( );
		bool checkBoard( );
		void clearBoard( );
		void displayStatistics( );
		//public static variable for numGamesPlayed
		static int numGamesPlayed;
	private:
		static const int DEFAULT_NUM_PLAYERS = 2;
		static const int ROW = 3;
		static const int COL = 3;
		Player players[DEFAULT_NUM_PLAYERS];
		Cell board[ROW][COL];
		int currentPlayer;
		Date gameDay;
		//used by checkBoard( ) and the functions
		//called by checkBoard( ) [1 or 0]
		int winner;
		//private methods
		//methods used by checkBoard( )
		bool checkSumValue(int);
		bool checkRightDiagonal( );
		bool checkLeftDiagonal( );
		bool checkRows( );
		bool checkCols( );
};

#endif
]0;brookecantwell@storm:~/CISC2000/final/tictactoe[brookecantwell@storm tictactoe]$ cat tictactoe.cpp
/*
 * Tic Tac Toe Class Implementation
 *
 * tictactoe.cpp
 *
 * Brooke Cantwell
 *
 * 8 May 2016
 *
 * Functions and methods for the Tic Tac Toe class.
 */

#include <iostream>
#include <iomanip>
#include "tictactoe.h"
#include <ctime>
#include <cstdlib>

int TicTacToe::numGamesPlayed = 1;

//GLOBAL FUNCTIONS

//output function, displays the board and the current player
//and player handle

ostream& operator<< (ostream&out, TicTacToe game) {

	out << endl << " +---+---+---+" << endl;

	for (int r = 0; r < game.ROW; r++) {

		for (int c = 0; c < game.COL; c++) {
			out << " | ";
			out << game.board[r][c].getMarker( );
		}

		out << " | " << endl;
		out << " +---+---+---+" << endl;
	}

	out << endl;

	return(out);
}

istream& operator>> (istream&in, TicTacToe&game) {
	int r, c;
	char dummyChar;

	do {
		cout << "Player #" << game.currentPlayer + 1 << " (" << game.players[game.currentPlayer].getHandle( ) << ')' << endl;
		cout << "Input desired cell in the form ROWxCOL: ";
		in >> r >> dummyChar >> c;
		c--;
		r--;
	} while (!game.setCell(r,c));


	return(in);
}	

//CONSTRUCTORS

//default constructor
TicTacToe::TicTacToe( ) {
	currentPlayer = 0;
}

TicTacToe::TicTacToe(string f1, char m1, string l1, string f2, char m2, string l2) {
	players[0].setName(f1, m1, l1);
	players[1].setName(f2, m2, l2);

}

//MUTATOR METHODS

//setCell, checks that board cell is valid
bool TicTacToe::setCell(int r, int c) {
	bool restat = true;

	if (board[r][c].takenCell( )) {
		cout << "That cell is taken!" << endl;
		restat = false;
	}

	else {	
		if (r <= ROW && c <= COL)
			playCell(r, c);
		else
			restat = false;
	}

	return(restat);
}

//playCell, alter cell values
void TicTacToe::playCell(int r, int c) {
	char mark = players[currentPlayer].getMarker( );

	board[r][c].setMarker(mark);

	//check for winner
	checkBoard( );
}

//inputPlayer, input player information
void TicTacToe::inputPlayers( ) {
	for (int i = 0; i < DEFAULT_NUM_PLAYERS; i++) {
		cin >> players[i];
	}
}

//inputDate, input date information
void TicTacToe::inputDate( ) {
	cin >> gameDay;
}

//randomize markers for each player
void TicTacToe::randomMarker( ) {
	int rNum;
	//create temporary array of player objects
	Player tempPlayers[DEFAULT_NUM_PLAYERS] = players;

	srand (time (0) );

	rNum = rand( ) % 2 + 0;

	switch(rNum) {
		//if the first player in the array is
		//assigned x (order doesn't change)
		case 0:
			players[0].setMarker('X');
			players[1].setMarker('O');
			//x goes first
			currentPlayer = 0;
			break;
		//if the second player in the array is assigned x 
		//(switch players so x always goes first and is the 
		//1st player in the array)
		case 1:
			//switch players around
			players[0] = tempPlayers[1];
			players[1] = tempPlayers[0];
			//assign markers
			players[0].setMarker('X');
			players[1].setMarker('O');
			currentPlayer = 0;
			break;
		default:
			cout << "ERROR" << endl;
	}

	cout << "Player #1: " << players[0].getHandle( ) << endl;
	cout << "Player #2: " << players[1].getHandle( ) << endl;
}

//change players
void TicTacToe::changePlayer( ) {
	if (currentPlayer == 0)
		currentPlayer = 1;
	else
		currentPlayer = 0;
}

//checkBoard - sums up rows/columns/diagonals and checks for a winner
bool TicTacToe::checkBoard( ) {
	int numSums = 4;
	bool win;
	int count = 0;	

	//call all functions to sum up diagonals, rows
	//and columns and break out of the loop if one
	//of the functions returns true
	while (!win && count < numSums) {
		win = checkRightDiagonal( );
		if (win)
			break;
		win = checkLeftDiagonal( );
		if (win)
			break;
		win = checkRows( );
		if (win)
			break;
		win = checkCols( );
		if (win)
			break;
		count++;
	}
	
	return(win);

}

//PRIVATE METHODS used by checkBoard( )

//function that contains the switch statement/logic used
//in every function called by checkBoard( ), if a winner
//is found the winner data members is assigned, the
//gamesWon value for that player is incremented, and
//the winner and their handle is displayed
bool TicTacToe::checkSumValue(int sum) {
	bool win;

	switch(sum) {
		case 9:
			win = true;
			winner = 0;
			cout << "Player #1, " << players[0].getHandle( ) << " won!" << endl;
			players[0].gamesWon++;
			break;
		case -9:
			win = true;
			winner = 1;
			cout << "Player #2, " << players[1].getHandle( ) << " won!" << endl;
			players[1].gamesWon++;
			break;
		default:
			win = false;
	}

	return(win);
}

bool TicTacToe::checkRightDiagonal( ) {
	bool win;
	int sum = 0;
	
	for (int r = 0, c = 0; r < ROW; r++, c++)
		sum += board[r][c].getiMarker( );

	win = checkSumValue(sum);

	return(win);
}


bool TicTacToe::checkLeftDiagonal( ) {
	bool win;
	int sum = 0;

	for (int r = 0, c = COL - 1; c >= 0; r++, c--)	
		sum += board[r][c].getiMarker( );

	win = checkSumValue(sum);

	return(win);
}

bool TicTacToe::checkRows( ) {
	bool win;
	int sum;	

	for  (int r = 0; r < ROW && !win; r++) {
		sum = 0;
		for (int c = 0; c < COL; c++)
			sum += board[r][c].getiMarker( );
		win = checkSumValue(sum);
	}

	return(win);
}

bool TicTacToe::checkCols( ) {
	bool win;
	int sum;

	for (int c = 0; c < COL && !win; c++) {
		sum = 0;
		for (int r = 0; r < ROW; r++)
			sum += board[r][c].getiMarker( );
		win = checkSumValue(sum);
	}

	return(win);
}



//use the setMarker method to clear the board and reset
//iMarker values to 0
void TicTacToe::clearBoard( ) {
	for (int r = 0; r < ROW; r++) {
		for (int c = 0; c < COL; c++) {
			board[r][c].setMarker(' ');
		}
	}
}

void TicTacToe::displayStatistics( ) {

	cout << "Number of Games Played: " << numGamesPlayed << endl << endl;

	for (int i = 0; i < DEFAULT_NUM_PLAYERS; i++) {
		cout << "Statistics for " << players[i].getHandle( ) << endl;
		cout << "Games Won: " << players[i].gamesWon << endl;
		cout << std::fixed << setprecision(2) << "Percentage of Games Won: " << (players[i].gamesWon / (float)numGamesPlayed ) * 100 << '%' << endl;
}
}
]0;brookecantwell@storm:~/CISC2000/final/tictactoe[brookecantwell@storm tictactoe]$ cat driver.cpp
/*
 * Driver for Tic Tac Toe Class
 * (Final Lab Assignment)
 *
 * driver.cpp
 *
 * Brooke Cantwell
 *
 * 5 May 2016
 *
 * Driver for the Tic Tac Toe
 * game...
 *
 */

#include <iostream>
#include <iomanip>
#include "date.h"
#include "name.h"
#include "player.h"
#include "tictactoe.h"

using namespace std;

main( ) {
	TicTacToe game;
	bool startGame;
	bool firstTime = true;
	char answer = 'Y';
	int moveCounter = 0;

	//function prototypes
	bool startMenu( );
	
	startGame = startMenu( );

	//if the user decides to play
	if (startGame) {

		//input for player information and date
		game.inputPlayers( );
		game.inputDate( );

		//play the game
		while (answer == 'Y' || answer == 'y') {
			if (firstTime == true) {
				game.randomMarker( );
				firstTime = false;
			}
			cout << game;
			cin >> game;
			moveCounter++;
			if (!game.checkBoard( ) && moveCounter < 9)
				game.changePlayer( );
			else {
				if (!game.checkBoard( ) && moveCounter == 9) {
					cout << "Tie!" << endl;
					moveCounter = 0;
					game.clearBoard( );
					firstTime = true;
					cout << "Enter Y to play again or any other character to quit: ";
					cin >> answer;
					if (answer == 'Y' || answer == 'y')
						game.numGamesPlayed++;
				}
				else {
					cout << game;
					game.clearBoard( );
					firstTime = true;
					moveCounter = 0;
					cout << "Enter Y to play again or any other character to quit: ";
					cin >> answer;
					if (answer == 'Y' || answer == 'y')
						game.numGamesPlayed++;	
				}
	
			}
	}
	//display statistics
	game.displayStatistics( );

	}

}

bool startMenu( ) {
	char play;	
	bool startGame;

	cout << "Welcome to Tic-Tac-Toe in C++ Version 2.0!" << endl;
	cout << "Would you like to play? (Y/N): ";
	cin >> play;

	switch(play) {
		case 'Y':
		case 'y':
			cout << "Good choice!" << endl;
			cout << "First, enter your player information." << endl;
			startGame = true;
			break;
		case 'N':
		case 'n':
			cout << "That's too bad!" << endl;
			startGame = false;
			break;
		default:
			//if the user doesn't answer Y/N
			cout << "Unrecognized answer!" << endl;
			do {
				cout << "Would you like to play? (Y/N): ";
				cin >> play;
			} while (play != 'Y' && play != 'y' && play != 'N' && play != 'n');
			if (play == 'Y' || play == 'y') {
				cout << "Good choice!" << endl;
				cout << "First, enter your player information." << endl;
				startGame = true;
			}
			else {
				cout << "That's too bad!" << endl;
				startGame = false;
			}
	}

	return(startGame);

}
]0;brookecantwell@storm:~/CISC2000/final/tictactoe[brookecantwell@storm tictactoe]$ g++ date.cpp name.cpp player.cpp cell.cpp tictca[K[Kactoe.cpp driver. cpp
]0;brookecantwell@storm:~/CISC2000/final/tictactoe[brookecantwell@storm tictactoe]$ ./a.out
Welcome to Tic-Tac-Toe in C++ Version 2.0!
Would you like to play? (Y/N): Y
Good choice!
First, enter your player information.
Enter name in the form First MI Last: Brooke E Canw twell
Enter your desired player handle: Brooke
Enter name in the form First MI Last: John D Doe
Enter your desired player handle: John
Input date in the for mm/dd/yyyy: 5/11/2016
Player #1: Brooke
Player #2: John

 +---+---+---+
 |   |   |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+

Player #1 (Brooke)
Input desired cell in the form ROWxCOL: 1x1

 +---+---+---+
 | X |   |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+

Player #2 (John)
Input desired cell in the form ROWxCOL: 2x2

 +---+---+---+
 | X |   |   | 
 +---+---+---+
 |   | O |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+

Player #1 (Brooke)
Input desired cell in the form ROWxCOL: 2x1

 +---+---+---+
 | X |   |   | 
 +---+---+---+
 | X | O |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+

Player #2 (John)
Input desired cell in the form ROWxCOL: 3x1

 +---+---+---+
 | X |   |   | 
 +---+---+---+
 | X | O |   | 
 +---+---+---+
 | O |   |   | 
 +---+---+---+

Player #1 (Brooke)
Input desired cell in the form ROWxCOL: 1x3

 +---+---+---+
 | X |   | X | 
 +---+---+---+
 | X | O |   | 
 +---+---+---+
 | O |   |   | 
 +---+---+---+

Player #2 (John)
Input desired cell in the form ROWxCOL: 1x3
That cell is taken!
Player #2 (John)
Input desired cell in the form ROWxCOL: 1x2

 +---+---+---+
 | X | O | X | 
 +---+---+---+
 | X | O |   | 
 +---+---+---+
 | O |   |   | 
 +---+---+---+

Player #1 (Brooke)
Input desired cell in the form ROWxCOL: 3x2

 +---+---+---+
 | X | O | X | 
 +---+---+---+
 | X | O |   | 
 +---+---+---+
 | O | X |   | 
 +---+---+---+

Player #2 (John)
Input desired cell in the form ROWxCOL: 2x3

 +---+---+---+
 | X | O | X | 
 +---+---+---+
 | X | O | O | 
 +---+---+---+
 | O | X |   | 
 +---+---+---+

Player #1 (Brooke)
Input desired cell in the form ROWxCOL: 3x3
Tie!
Enter Y to play again or any other character to quit: y
Player #1: John
Player #2: Brooke

 +---+---+---+
 |   |   |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+

Player #1 (John)
Input desired cell in the form ROWxCOL: 1x1

 +---+---+---+
 | X |   |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+

Player #2 (Brooke)
Input desired cell in the form ROWxCOL: 1x2

 +---+---+---+
 | X | O |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+

Player #1 (John)
Input desired cell in the form ROWxCOL: 1x3

 +---+---+---+
 | X | O | X | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+

Player #2 (Brooke)
Input desired cell in the form ROWxCOL: 2x2

 +---+---+---+
 | X | O | X | 
 +---+---+---+
 |   | O |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+

Player #1 (John)
Input desired cell in the form ROWxCOL: 2x3

 +---+---+---+
 | X | O | X | 
 +---+---+---+
 |   | O | X | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+

Player #2 (Brooke)
Input desired cell in the form ROWxCOL: 3x2
Player #2, Brooke won!

 +---+---+---+
 | X | O | X | 
 +---+---+---+
 |   | O | X | 
 +---+---+---+
 |   | O |   | 
 +---+---+---+

Enter Y to play again or any other character to quit: y
Player #1: John
Player #2: Brooke

 +---+---+---+
 |   |   |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+

Player #1 (John)
Input desired cell in the form ROWxCOL: 1x1

 +---+---+---+
 | X |   |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+

Player #2 (Brooke)
Input desired cell in the form ROWxCOL: 1x2

 +---+---+---+
 | X | O |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+

Player #1 (John)
Input desired cell in the form ROWxCOL: 2x2

 +---+---+---+
 | X | O |   | 
 +---+---+---+
 |   | X |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+

Player #2 (Brooke)
Input desired cell in the form ROWxCOL: 2x1

 +---+---+---+
 | X | O |   | 
 +---+---+---+
 | O | X |   | 
 +---+---+---+
 |   |   |   | 
 +---+---+---+

Player #1 (John)
Input desired cell in the form ROWxCOL: 3x3
Player #1, John won!

 +---+---+---+
 | X | O |   | 
 +---+---+---+
 | O | X |   | 
 +---+---+---+
 |   |   | X | 
 +---+---+---+

Enter Y to play again or any other character to quit: q
Number of Games Played: 3

Statistics for John
Games Won: 1
Percentage of Games Won: 33.33%
Statistics for Brooke
Games Won: 1
Percentage of Games Won: 33.33%
]0;brookecantwell@storm:~/CISC2000/final/tictactoe[brookecantwell@storm tictactoe]$ exit
exit

Script done on Wed 11 May 2016 04:04:29 AM EDT
