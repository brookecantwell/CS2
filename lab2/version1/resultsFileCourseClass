Script started on Fri 26 Feb 2016 09:36:31 PM EST
]0;brookecantwell@storm:~/CISC2000/lab2/version1[brookecantwell@storm version1]$ pwd
/home/students/FALL15/brookecantwell/CISC2000/lab2/version1
]0;brookecantwell@storm:~/CISC2000/lab2/version1[brookecantwell@storm version1]$ cat name.h
/*
 *
 * Name Class
 *
 * name.h
 *
 * Brooke Cantwell
 * 
 * 20 February 2016
 *
 * Header file for the name class
 *
 */

#ifndef NAME_H
#define NAME_H

#include <iostream>
using namespace std;

class Name {
	public:
		//constructors
		Name( );
		Name(string, char, string);
		//mutator methods
		void setName(string, char, string);
		void inputName( );
		//accessor methods
		string getFirstName( ) const;
		char getMiddleInitial( ) const;
		string getLastName( ) const;
		//display method
		void display( );


	private:
		string fname, lname;
		char mi;

};

#endif
]0;brookecantwell@storm:~/CISC2000/lab2/version1[brookecantwell@storm version1]$ cat name.cpp
/*
 * Implementation of Name class
 *
 * name.cpp
 *
 * Brooke Cantwell
 *
 * 20 February 2016
 *
 * Method definitions for name class
 *
 */



#include "name.h"

//default constructor
Name::Name( ) {
	fname = "First";
	mi = 'I';
	lname = "Last";
}

//constructor for name
Name::Name(string f, char m, string l) {
	fname = f;
	mi = m;
	lname = l;
}

//mutator method
void Name::setName(string f, char m, string l) {
	fname = f;
	mi = m;
	lname = l;
}

//populate data with user input
void Name::inputName( ) {
	cout << "Input name in the format First MI Last: ";
	cin >> fname >> mi >> lname;
}

//accessor method for first name
string Name::getFirstName( ) const {
	return(fname);
}

//accessor method for middle initial
char Name::getMiddleInitial( ) const {
	return(mi);
}

//accessor method for last name
string Name::getLastName( ) const {
	return(lname);
}

//display method
void Name::display( ) {
	cout << "Name: " << fname << ' ' << mi << ' ' << lname << endl;
}
]0;brookecantwell@storm:~/CISC2000/lab2/version1[brookecantwell@storm version1]$ cat date.h
/*
 * Date Class
 *
 * date.h
 *
 * Brooke Cantwell
 *
 * 20 February 2016
 *
 * Header file for the date class
 *
 */

#ifndef DATE_H
#define DATE_H

#include <iostream>

using namespace std;

class Date {
	public:
		//constructors
		Date( );
		Date(int, int, int);
		//mutator methods
		bool setDate(int, int, int);	
		void inputDate( );
		//accessor methods
		int getMonth( );
		int getDay( );
		int getYear( );
		//display
		void display( ) const;
	private:
		int month, day, year;
};

#endif
]0;brookecantwell@storm:~/CISC2000/lab2/version1[brookecantwell@storm version1]$ cat date.cpp
/*
 * Implementation for Date class
 *
 * date.cpp
 *
 * Brooke Cantwell
 *
 * 20 February 2016
 *
 * Methods for date class
 *
 */

#include "date.h"

//default constructor
Date::Date( ) {
	month = day = year = 0;
}

//constructor to set all data members
Date::Date(int m, int d, int y) {
	month = m;
	day = d;
	year = y;
}

//setDate, checks for valid date
bool Date::setDate(int m, int d, int y ) {
	bool setValue = false;
	int maxDays;

	//determine the maximum amount of days in every month
	switch(month) {
		case 1:
		case 3:
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			maxDays = 31;
			break;
		case 4:
		case 6:
		case 9:
		case 11:
			maxDays = 30;
			break;
		case 2:
			maxDays = 28;
	}

	if (month >= 1 && month <= 12 && day > 0 && day <= maxDays) { 
		setValue = true;
		month = m;
		day = d;
		year = y;
	}
	
	return(setValue);

}

//inputDate, gets user input and checks validity
void Date::inputDate( ) {
	char dummyChar;

	do {
		cout << "Input date in the form mm/dd/yyyy: ";
		cin >> month >> dummyChar >> day >> dummyChar >> year;
	} while (!setDate(month, day, year));
}

//getMonth, accessor method for month data member
int Date::getMonth( ) {
	return(month);
}


//getDay, accessor method for day data member
int Date::getDay( ) {
	return(day);
}

//getYear, accessor method for year data member
int Date::getYear( ) {
	return(year);
}

//display function
void Date::display( ) const {
	cout << month << '/' << day << '/' << year << endl;
}
]0;brookecantwell@storm:~/CISC2000/lab2/version1[brookecantwell@storm version1]$ cat student.h
/*
 * Student Class 
 *
 * student.h
 *
 * Brooke Cantwell
 *
 * 20 February 2016
 *
 * Header file for the student class
 *
 */

#ifndef STUDENT_H
#define STUDENT_H

#include "date.h"
#include "name.h"
#include "program.h"
#include "course.h"

class Student {
	public:
		//constructors
		Student( );
		Student(Name, Date, Program, char, int);
		//mutator methods
		//methods to set data members with specific values
		void setName(string, char, string);
		void setDOB(int, int, int);
		void setProgram(string, string, string, string);
		bool setGender(char);
		void setStudentID(int);
		void setCourse(string, string, char, string, string, int, int, int);
		void setNumCourses(int);
		void setGPA(double);
		//mutator methods to populate with user input
		void inputName( );
		void inputDate( );
		void inputProgram( );
		void inputGender( );
		void inputStudentID( );
		bool inputCourse(int);
		void inputAll( );
		//display method
		void displayInfo( );
		void displayCourseInfo( );
		//methods for course array
		double calculateGPA(int);
		//method to increment course number
		void inc_numCourses( );
	private:
		int studentID;
		Name name;
		Date dob;
		char gender;
		Program program;
		Course completedCourses[10];
		int numCourses;
		int creditsEarned;
		double GPA;
};

#endif
]0;brookecantwell@storm:~/CISC2000/lab2/version1[brookecantwell@storm version1]$ cat student.cpp
/*
 * Implementation of Student class
 *
 * student.cpp
 *
 * Brooke Cantwell
 *
 * 20 February 2016
 *
 * Method definitions for student class
 *
 */

#include "student.h"
#include <iomanip>

//default constructor, uses default constructors for name, date, and program, and 
//sets default values for student ID and gender
Student::Student( ) {
	studentID = 0;
	gender = ' ';
	numCourses = 0;
}

//constructor to instantiate object with name, date, and program
Student::Student(Name n, Date d, Program p, char g, int ID) {
	name = n;
	dob = d;
	program = p;
	gender = g;
	studentID = ID;
	numCourses = 0;
}

//setName method calls name constructor to set student name
void Student::setName(string f, char m, string l) {
	name.setName(f, m, l);
}

//setDOB calls date constructor to set date of birth
void Student::setDOB(int m, int d, int y) {
	dob.setDate(m, d, y);
}

//setProgram calls program constructor to set campus, degree, major, and minor
void Student::setProgram(string c, string d, string ma, string mi) {
	program.setCampus(c);
	program.setDegree(d);
	program.setMajor(ma);
	program.setMinor(mi);
}

//setGender sets student gender and validates it as either m or f
bool Student::setGender(char g) {
	bool setValue;

	switch(g) {
		case 'M':
		case 'm':
		case 'F':
		case 'f':
			setValue = true;
			break;
		default:
			setValue = false;
	}

	return(setValue);
}

//setStudentID accepts value for student ID
void Student::setStudentID(int ID) {
	studentID = ID;
}	

//setCourseID calls set function of course class
void Student::setCourse(string n, string first, char mi, string last, string g, int i, int c, int index) {
	completedCourses[index].setName(n);
	completedCourses[index].setInstructorName(first, mi, last);
	completedCourses[index].setGrade(g);
	completedCourses[index].setID(i);
	completedCourses[index].setCredits(c);
}

void Student::setNumCourses(int n) {
	numCourses = n;
}

void Student::setGPA(double g) {
	GPA = g;
}

//inputName calls input function of name class
void Student::inputName( ) {
	name.inputName( );
}

//inputDate calls input function of date class
void Student::inputDate( ) {
	dob.inputDate( );
}

//input program calls input functions for campus and degree and major and minor
void Student::inputProgram( ) {
	program.inputCampus_Degree( );
	program.inputMajor_Minor( );
}

//inputStudentID accepts user input for student ID
void Student::inputStudentID( ) {
	cout << "Enter student ID: ";
	cin >> studentID;
}

//inputGender accepts user input for gender and validates it with setGender
void Student::inputGender( ) {
	
	do {
		cout << "Enter gender (m/f): ";
		cin >> gender;
	} while (!setGender(gender));
}

//inputCourse, allows the user to input course information (up to 10) and
//gives them a choice to stop
bool Student::inputCourse(int i) {

	//display the option to stop every time except the first
	static bool first = true;
	bool cont = true;
	static char answer = 'C';

	if (first == false) {
		cout << "To stop entering courses, enter 'S', to continue enter 'C': ";
		cin >> answer;
	}	

	if (answer == 'C' || answer == 'c') {
		completedCourses[i].inputName( );
		completedCourses[i].inputInstructorName( );
		completedCourses[i].inputGrade( );
		completedCourses[i].inputID( );
		completedCourses[i].inputCredits( );
	}
	else
		cont = false;

	first = false;
	
	return(cont);

}

//inputAll calls all of the input functions created for each data member
void Student::inputAll( ) {
	name.inputName( );
	dob.inputDate( );
	program.inputCampus_Degree( );
	program.inputMajor_Minor( );
	inputStudentID( );
	inputGender( );
}

//displayInfo displays all data members of the student class
void Student::displayInfo( ) {
	name.display( );
	cout << "Date of Birth: ";
	dob.display( );
	program.display( );
	cout << "Gender: " << gender << endl;
	cout << "Student ID: " << studentID << endl;
} 

//calculateGPA, stores grade values (integer) in a grade array depending
//on the letter grade they recieved, multiplies this value by the credits
//of the class, and stores it in a qualityPoints array. The contents of the
//quality points array are added and divided by the total credits to get GPA

double Student::calculateGPA(int i) {
	
	double grade[10];
	double gradeSum = 0;
	int creditSum = 0;
	double qualityPoints[10];
	double qualityPointsSum = 0;

	int credits = completedCourses[i].getCredits( );
	
	for (int i = 0; i < numCourses; i++) {

		if (completedCourses[i].getGrade( ) == "A")
			grade[i] = 4;
		else
		if (completedCourses[i].getGrade( ) == "A-")
			grade[i] = 3.70;
		else
		if (completedCourses[i].getGrade( ) == "B+")
			grade[i] = 3.33;
		else
		if (completedCourses[i].getGrade( ) == "B")
			grade[i] = 3;
		else
		if (completedCourses[i].getGrade( ) == "B-")
			grade[i] = 2.7;
		else
		if (completedCourses[i].getGrade( ) == "C+")
			grade[i] = 2.3;
		else
		if (completedCourses[i].getGrade( ) == "C")
			grade[i] = 2;
		else
		if (completedCourses[i].getGrade( ) == "C-")
			grade[i] = 1.7;
		else
		if (completedCourses[i].getGrade( ) == "D+")
			grade[i] = 1.3;
		else
		if (completedCourses[i].getGrade( ) == "D")
			grade[i] = 1;
		else
		if (completedCourses[i].getGrade( ) == "D-")
			grade[i] = .7;
		else
		if (completedCourses[i].getGrade( ) == "F")
			grade[i] = 0;

		qualityPoints[i] = grade[i] * credits;
	
	}

	//sum quality points
	for (int c = 0; c < numCourses; c++) {
		qualityPointsSum += qualityPoints[c];
	}

	//sum credits
	for (int c = 0; c < numCourses; c++) {
		creditSum += completedCourses[c].getCredits( );
	}	
	 	
	GPA = qualityPointsSum / creditSum;

	cout << endl << "GPA: " << std::fixed << setprecision(2) << GPA << endl;
}

void Student::displayCourseInfo( ) {
	for (int i = 0; i < numCourses--; i++) {
		completedCourses[i].display( );
	}
}

void Student::inc_numCourses( ) {
	++numCourses;
}
]0;brookecantwell@storm:~/CISC2000/lab2/version1[brookecantwell@storm version1]$ cat program.h
/*
 * Program Class
 *
 * program.h
 *
 * Brooke Cantwell
 *
 * 20 February 2016
 *
 * Header file for the program class
 *
 */

#ifndef PROGRAM_H
#define PROGRAM_H

#include <iostream>

using namespace std;

class Program {
	public:
		//constructors
		Program( );
		Program(string, string, string, string);
		//mutator methods
		bool setCampus(string);
		bool setDegree(string);
		bool setMajor(string);
		bool setMinor(string);
		//mutator methods with user input
		void inputCampus_Degree( );
		void inputMajor_Minor( );
		//accessor methods
		string getCampus( );
		string getDegree( );
		string getMajor( );
		string getMinor( );
		void display( );
	private:
		string campus, degree, major, minor;



};

#endif
]0;brookecantwell@storm:~/CISC2000/lab2/version1[brookecantwell@storm version1]$ cat program.cpp
/*
 * Program Class Implementation
 *
 * program.cpp
 *
 * Brooke Cantwell
 *
 * 20 February 2016
 *
 * Implementation of Program class
 */

#include "program.h"

//default constructor
Program::Program( ) {
	campus = degree = "N/A";
	major = "UNDECLARED";
	minor = "NONE";
}

//constructor for all data members
Program::Program(string c, string d, string ma, string mi) {
	campus = c;
	degree = d;
	major = ma;
	minor = mi;
}

//mutator method for set campus
bool Program::setCampus(string c) {
	bool setValue;

	if (c == "RH" || c == "LC" || c == "WC")
		setValue = true;
	else
		setValue = false;

	return(setValue);
}

//mutator method for set degree
bool Program::setDegree(string d) {
	bool setValue;
	
	if (d == "BS" || d == "BA")
		setValue = true;
	else
		setValue = false;

	return(setValue);

}

//mutator method for major
bool Program::setMajor(string ma) {
	major = ma;
}

//mutator method for minor
bool Program::setMinor(string mi) {
	minor = mi;
}

//mutator method to set campus and degree with keyboard input
void Program::inputCampus_Degree( ) {
	do {
		cout << "Enter campus (RH, LC, or WC): ";
		cin >> campus;
	} while (!setCampus(campus));

	do {
		cout << "Enter degree (BS/BA): ";
		cin >> degree;
	} while (!setDegree(degree));
}

//mutator method to populate major and minor with user input
void Program::inputMajor_Minor( ) {
	cout << "Enter major or UNDECLARED: ";
	cin >> major;
	
	cout << "Enter minor or NONE: ";
	cin >> minor;
}

//accessor method for campus
string Program::getCampus( ) {
	return(campus);
}

//accessor method for degree
string Program::getDegree( ) {
	return(degree);
}

//accessor method for major
string Program::getMajor( ) {
	return(major);
}

//accessor method for minor
string Program::getMinor( ) {
	return(minor);
}

//display method
void Program::display( ) {
	cout << "Campus: " << campus << endl;
	cout << "Degree: " << degree << endl;
	cout << "Major: " << major << endl;
	cout << "Minor: " << minor << endl;
}
]0;brookecantwell@storm:~/CISC2000/lab2/version1[brookecantwell@storm version1]$ cat course.h
/*
 * Course Class
 *
 * course.h
 *
 * Brooke Cantwell
 *
 * 24 February 2015
 *
 * Header file for the course class
 *
 */

#ifndef COURSE_H
#define COURSE_H

#include <iostream>
#include "name.h"

using namespace std;

class Course {
	public:
		Course( );
		Course(string, string, string, int, int);
		//mutator methods
		void setName(string);		
		void setInstructor(string);
		void setInstructorName(string, char, string);
		void setGrade(string);
		void setID(int);
		void setCredits(int);
		void inputName( );
		void inputInstructor( );
		void inputInstructorName( );
		void inputGrade( );
		void inputID( );
		void inputCredits( );
		//accessor methods
		string getName( );
		string getInstructor( );
		string getGrade( );
		int getID( );
		int getCredits( );
		void display( );
	private:
		string name, instructor;
		//grade as a string for + and -
		string grade;
		int id, numCredits;
		Name instructorName;
};

#endif
]0;brookecantwell@storm:~/CISC2000/lab2/version1[brookecantwell@storm version1]$ cat course.cpp
/*
 * Implementation for the Course class
 *
 * course.cpp
 *
 * Brooke Cantwell
 *
 * 24 February 2016
 *
 * Methods for the course class
 *
 */

#include "course.h"

//default constructor
Course::Course( ) {
	name = instructor = grade  = " ";
	id = numCredits = 0;
}

//constructor for all data members
Course::Course(string n, string in, string g, int i, int c) {
	name = n;
	instructor = in;
	grade = g;
	id = i;
	numCredits = c;	
}

//setName, sets course name
void Course::setName(string n) {
	name = n;
}

//setInstructorName, sets contents of Name object
void Course::setInstructorName(string f, char m, string l) {
	instructorName.setName(f, m, l);
}

//setInstructor, sets course instructor
void Course::setInstructor(string i) {
	instructor = i;
}

//setGrade, sets grade receieved for the course
void Course::setGrade(string g) {
	grade = g;
}

//setID, sets course ID
void Course::setID(int i) {
	id = i;
}

//setCredits, sets the number of credits for the course
void Course::setCredits(int c) {
	numCredits = c;
}

//inputName, accepts keyboard input for name
void Course::inputName( ) {
	cout << "Input course name: ";
	cin >> name;
}

//inputInstructor, accepts keyboard input for instructor
void Course::inputInstructor( ) {
	cout << "Input course instructor: ";
	cin >> instructor;
}

//inputInstructorName, accepts keyboard input for instructo
//name (object of Name)
void Course::inputInstructorName( ) {
	cout << "Instructor Name:  ";
	instructorName.inputName( );
}

//inputGrade, accepts keyboard input for grade
void Course::inputGrade( ) {
	cout << "Input grade received: ";
	cin >> grade;
}

//inputID, accepts keyboard input for course ID
void Course::inputID( ) {
	cout << "Input course ID: ";
	cin >> id;
}

//inputCredits, accepts keyboard input for credits
void Course::inputCredits( ) {
	cout << "Input number of credits: ";
	cin >> numCredits;
}

//getName, returns name data member
string Course::getName( ) {
	return(name);
}

//getInstructor, returns instructor data member
string Course::getInstructor( ) {
	return(instructor);
}

//getGrade, returns grade data members
string Course::getGrade( ) {
	return(grade);
}

//getID, returns ID data member
int Course::getID( ) {
	return(id);
}

//getCredits, returns numCredits data member
int Course::getCredits( ) {
	return(numCredits);
}

//display, displays all information for the course class
void Course::display( ) {
	cout << endl << "Course Information: " << endl << endl;
	cout << "Course Name: " << name << endl;
	cout << "Instructor: ";
	instructorName.display( );
	cout << "Course ID: " << id << endl;
	cout << "Grade Received: " << grade << endl;
	cout << "Number of Credits: " << numCredits << endl << endl;
}

]0;brookecantwell@storm:~/CISC2000/lab2/version1[brookecantwell@storm version1]$ cat driver.cpp
/*
 * Driver - Lab 2 Version 2
 *
 * driver.cpp
 *
 * Brooke Cantwell
 *
 * 20 February 2016
 *
 * Simple driver to test name, date, student, and program classes
 *
 */

#include "student.h"

main( ) {

	void test(Student&);
	void display(Student, Student);	
	void testCourse(Student&);

	//instantiate name, birthday, and program	
	Name sname ("Brooke", 'E', "Cantwell");
	Date dob (10, 27, 1993);
	Program sprogram;

	//populate program with user input
	cout << "Populate program with user input: " << endl;
	sprogram.inputCampus_Degree( );
	sprogram.inputMajor_Minor( );
	
	//create student object with constructor accepting name, dob, and program as well as gender and student ID
	cout << "Create object of student: ";
	Student s1(sname, dob, sprogram, 'F', 12829); 

	//display information for the first instance of the student class
	s1.displayInfo( );

	//instantiate second instance of student with default constructor
	cout << endl << "Create second instance of student with default constructor: " << endl;
	Student s2;

	//call test function on second instance of student class
	cout << "Call testInput( ) function on the second instance of the student class: " << endl;
	test(s2);


	display(s1,s2);

	cout << endl << "TESTING COURSE INFORMATION" << endl;

	//call function that tests course
	testCourse(s1);

}

void testCourse(Student&s) {
	bool cont = true;
	int i = 0;
	
	s.setNumCourses(0);	

	for (int i = 0; i < 10 && cont == true; i++) {
		s.inc_numCourses( );
		cont = s.inputCourse(i);
	}
	
	s.setGPA(s.calculateGPA(i));
	cout << endl;
	s.displayCourseInfo( );

}

void test(Student&s) {

	cout << "Original contents: " << endl;
	s.displayInfo( );
	cout << "Populate with user input using inputAll( ) function: " << endl;
	s.inputAll( );
	cout << "Display update contents: " << endl;
	s.displayInfo( );

}

void display(Student s1, Student s2) {
	cout << endl << "Display final contents: " << endl;
	cout << endl << "First instance: " << endl;
	s1.displayInfo( );
	cout << endl << "Second Instance: " << endl;
	s2.displayInfo( );
}
]0;brookecantwell@storm:~/CISC2000/lab2/version1[brookecantwell@storm version1]$ g++ name.cpp date.cpp pr ogram.cpp student.cpp course.cpp driver.cpp
]0;brookecantwell@storm:~/CISC2000/lab2/version1[brookecantwell@storm version1]$ ./a.out
Populate program with user input: 
Enter campus (RH, LC, or WC): LC
Enter degree (BS/BA): BS
Enter major or UNDECLARED: CISC
Enter minor or NONE: NONE
Create object of student: Name: Brooke E Cantwell
Date of Birth: 10/27/1993
Campus: LC
Degree: BS
Major: CISC
Minor: NONE
Gender: F
Student ID: 12829

Create second instance of student with default constructor: 
Call testInput( ) function on the second instance of the student class: 
Original contents: 
Name: First I Last
Date of Birth: 0/0/0
Campus: N/A
Degree: N/A
Major: UNDECLARED
Minor: NONE
Gender:  
Student ID: 0
Populate with user input using inputAll( ) function: 
Input name in the format First MI Last: John D Doe
Input date in the form mm/dd/yyyy: 1/3/1990
Enter campus (RH, LC, or WC): RH
Enter degree (BS/BA): BS
Enter major or UNDECLARED: Biology
Enter minor or NONE: NONE
Enter student ID: 23490
Enter gender (m/f): M
Display update contents: 
Name: John D Doe
Date of Birth: 1/3/1990
Campus: RH
Degree: BS
Major: Biology
Minor: NONE
Gender: M
Student ID: 23490

Display final contents: 

First instance: 
Name: Brooke E Cantwell
Date of Birth: 10/27/1993
Campus: LC
Degree: BS
Major: CISC
Minor: NONE
Gender: F
Student ID: 12829

Second Instance: 
Name: John D Doe
Date of Birth: 1/3/1990
Campus: RH
Degree: BS
Major: Biology
Minor: NONE
Gender: M
Student ID: 23490

TESTING COURSE INFORMATION
Input course name: CS1
Instructor Name:  Input name in the format First MI Last: Christine K Papadakis
Input grade received: A
Input course ID: 1600
Input number of credits: 4
To stop entering courses, enter 'S', to continue enter 'C': C
Input course name: CS2
Instructor Name:  Input name in the format First MI Last: Christine K Papadakis
Input grade received: A
Input course ID: 2000
Input number of credits: 4
To stop entering courses, enter 'S', to continue enter 'C': S

GPA: 4.00


Course Information: 

Course Name: CS1
Instructor: Name: Christine K Papadakis
Course ID: 1600
Grade Received: A
Number of Credits: 4


Course Information: 

Course Name: CS2
Instructor: Name: Christine K Papadakis
Course ID: 2000
Grade Received: A
Number of Credits: 4

]0;brookecantwell@storm:~/CISC2000/lab2/version1[brookecantwell@storm version1]$ exit
exit

Script done on Fri 26 Feb 2016 09:39:24 PM EST
